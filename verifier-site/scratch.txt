current verify in deciderETH

fn verify(
        vp: Self::VerifierParam,
        i: C1::ScalarField,
        z_0: Vec<C1::ScalarField>,
        z_i: Vec<C1::ScalarField>,
        running_instance: &Self::CommittedInstance,
        incoming_instance: &Self::CommittedInstance,
        proof: &Self::Proof,
    ) -> Result<bool, Error> {
        if i <= C1::ScalarField::one() {
            return Err(Error::NotEnoughSteps);
        }

        let (pp_hash, snark_vk, cs_vk): (C1::ScalarField, S::VerifyingKey, CS1::VerifierParams) =
            vp;

        // compute U = U_{d+1}= NIFS.V(U_d, u_d, cmT)
        let U = NIFS::<C1, CS1>::verify(proof.r, running_instance, incoming_instance, &proof.cmT);

        let (cmE_x, cmE_y) = NonNativeAffineVar::inputize(U.cmE)?;
        let (cmW_x, cmW_y) = NonNativeAffineVar::inputize(U.cmW)?;
        let (cmT_x, cmT_y) = NonNativeAffineVar::inputize(proof.cmT)?;

        let public_input: Vec<C1::ScalarField> = vec![
            vec![pp_hash, i],
            z_0,
            z_i,
            vec![U.u],
            U.x.clone(),
            cmE_x,
            cmE_y,
            cmW_x,
            cmW_y,
            proof.kzg_challenges.to_vec(),
            vec![
                proof.kzg_proofs[0].eval, // eval_W
                proof.kzg_proofs[1].eval, // eval_E
            ],
            cmT_x,
            cmT_y,
            vec![proof.r],
        ]
        .concat();

        use std::io::{self, Write};
        println!("printing public_input...");
        println!("{:?}", public_input);
        io::stdout().flush().unwrap();  // Forces the output to flush immediately


        let snark_v = S::verify(&snark_vk, &public_input, &proof.snark_proof)
            .map_err(|e| Error::Other(e.to_string()))?;
        if !snark_v {
            return Err(Error::SNARKVerificationFail);
        }

        // we're at the Ethereum EVM case, so the CS1 is KZG commitments
        CS1::verify_with_challenge(
            &cs_vk,
            proof.kzg_challenges[0],
            &U.cmW,
            &proof.kzg_proofs[0],
        )?;
        CS1::verify_with_challenge(
            &cs_vk,
            proof.kzg_challenges[1],
            &U.cmE,
            &proof.kzg_proofs[1],
        )?;

        Ok(true)
    }


decider_vp: (BigInt([14561262423713051470, 1793797207911610528, 12418526606045887034, 2255306852034638160]), VerifyingKey { alpha_g1: (508389424852816835791559706772680374998140263929115044241408068582308121741, 5507150537958782180068286354908433756394009055073499331657380732747576475321), beta_g2: (QuadExtField(10960984389959940043878193814272088721544721831062023099128431274301527711695 + 5280948991256933899845625825545656908270144179500458848022068667659117437450 * u), QuadExtField(14073353587145562739837669137095681749027613620894724697169118306923442333152 + 2232000201101855150086534105653376131642943237411139722538551544889972348045 * u)), gamma_g2: (QuadExtField(4992668480914283239513962738837018914831634220781450665542716441995330977348 + 596866769252086409212621160258458531069973070711152972190212517710823914359 * u), QuadExtField(1992756419149078633594506313705536638000746620365370183462842825845542489740 + 5355512755695356066374672150972735348763753221004530644194344913773698698990 * u)), delta_g2: (QuadExtField(3932335540274591266201786257535600904296920646360262902970026751458315634645 + 4133099136836200830747161799641998173182893787888070270733654840425188339604 * u), QuadExtField(14485127280998179351236674359043986993359182419743454457511765951458943902152 + 4019541247270239499005526012904959717619409159002614264441794260825531487907 * u)), gamma_abc_g1: [(21371705960793613404039020538813001149737111281144643562874491233683260233844, 9240591840726703258767662542603108208192664741690862569457076163424341699903), (18954604312669223379052038994843368415644834757859597131790820287072316404236, 4834207640283669109944670890459557901227184776798577466475942909219139968576), (5885040659574646599441534457102385993328414960555380738856228073470644912814, 16731884953167125297684222875846273770408382518033298514859707418092165599466), (19018450391008732286957432058353441090657359637175693355972884708952890932178, 18859139309886235431451441360210982579503939578251351338298574473089517886904), (8250798001405764934122470237035364753931966390149657546980658450585807508380, 295544291253758976520852699983345641425587356778370933183619726958902769337), (17600185595029233766747735133884206761867287311465479795360951149661377747954, 5196502810110254441536595939634137962545539325525390629052915184501821045928), (18737206128712297184394037457830534331389105905996749404035027510682972327375, 17221686869478816331916501062410656275326211953730339621665391464145208679535), (14145801279307002991006861670166527271715493071007521835649339063575561315331, 16482158154363897240379414959399059646609101092699011680201041124905178151879), (11029303803335701928870815632867241016453928056456115194471488037595565920199, 5871564967004651203912827911838547174890557180180873009431590335622555603543), (15498553717913906545759393516184362973674026072136545485803146841451482236463, 13992998629715109913455745447998062683503631797735879441210860905735694299155), (20247303774435582117118977452856784670216534679561088658640718921760510655678, 4460057165236300556323688670920630616298641557618925530901782511126588257187), (1961127726396406278660228343120836213121821807815893971333159832168252683270, 16473084725705304096804420508072930092771235659272937544111463349318580936770), (7632089076043026786297079316383996002342341033820666033871718426948534822093, 512516076460459829077767569246683875761106660920191474477388746008747341821), (2033929386434242635251674866747123305406236372052398596088481275102734490278, 8754855787421917733858616724817092436909069387543680980624336420325177857744), (7086143728757563868733744910023518838377093453261657392352240716802685085289, 2441526727010751797588712810304113255147725214514376477933261566604908193970), (4496169823924519621891908584628066778325052782031919647498928070836694497299, 18975529480584548375135464568270954405265604583074226340944163628083373765066), (11619377217377391599656605160537694912122993301123332816120079622002100854571, 2159893969681783334844388508092255508633726513943277369890172588014589612808), (6031359427566145691081081681007627931009858559947665589745567775598661148840, 11380965183980697813456836131210981135743807934265174881027868030471188973005), (10290608889787506014785150082941320799493774176016602381543646906748834679310, 18852045647255659422989440567517970942787786504946865912368621424999588796902), (20098339886194565034450914155893818254413439451442438640542541233195433454862, 9407079443061802193723953901959270321339964846611012573741603290366637719238), (21188117918097586483721051516232375997996694569992273639111979215016253338520, 18776107831613726642688774086723050960055588610341678328224601918490421215174), (1421915013297730230887053749399828222299689233258859623327824627246136779630, 9128758125268509858066516819696457450706508273437134099941779376217775345933), (18263433355883044600296330879526294841430326934934177691113100622927670893131, 15070796869820083226326668172625016649788378709514817248762539229312203898824), (12154353707676839395153175349167352831780780382401699909317961594025059123652, 569077811939296085233556213498130405969708490900932935813630750601613328959), (4546085055976900037165923205367402517549031998069856913820390902884573359192, 21300732412967699163296430373305529947703393162858213968301218596137309032982), (13189359745696869305979388042931966205981857272570027447561921920144214363019, 1990514847481244294561056871412673582999034186126709546480780581093428199787), (2625533566195406328291865421447056613306198072783943308233905036160407990933, 17840315782108578067670698955567363336483253197533542986950163863995377634843), (19890113660463341243712267152382629537475486592641405425697997115417505218105, 8051357251128288766379703789449845382177315033438771190116849831209917513537), (14617149433984523219702147000214388178782934973917648746812234380265849755496, 8696101451252425460854183769175870194470571323383427412959483156176194584130), (20134191763541194756237632356608508307242806859744907043525678965989355123115, 13346362123822886847293019964477915435804783960591152042125441124896546199166), (10557685346833811762921841670918622263838546753379144307063861571300744409593, 21096577482492856387580128318097068854076349547244622482826768160609471818293), (18872851052039456284482271018925695056707937155857013359680114411433070553631, 3258730547781404444888114446850866785110833084213468184229745267888941586677), (11573835054177435945808995413418454385034823127877310030957862466366228976307, 5611712372246946303231982356952710032279046284078427951462816113586405712210), (19103355672280958836241622585923827239286131139081341271835728121296518756395, 13775636359778375797958768202017979545039048160565567401462423154335505494), (10840487805264003509981121083740970394491647644337299432419782037796853594288, 13742198509041194484852400526930469207730875862241809716039216563102709798991), (7286267582610217900593962423806823082753385824461453962555970116974256834145, 13466690411733504032576984802275898639980439102092273920962006008410643720498), (18079476528639894204802136204314845840056166754063765334859348250909926808356, 20435750539279338822402675561053014384927262282848815021561282432853059975617), (2322990637711274499412943898921370940735896408201243884281528884110330026231, 823675541842984800872307916226650881380552959254466874129500637193679977696), (5265221509006816626518642690991430952483116557263842072944865732346082414229, 18173862943570520934773837034064566029364832885353699559723792887382993104988), (11319643029584294163892720889233008663646923324804266611235229864663406793640, 4120590861554079912054083764842500963538211558098346597298519667620968271598), (12094389427897442233391502820209988207587054819145781015829340097219906120150, 711667595935738969852513915891029390522453483802890967174236545878222895686), (10861500101348493948318303334286763497304703648072245592549350845238703542293, 3745460324936618220534174294354315785024261278760688020140746773371816061448), (17937595717265238897263198067836003970199607635150605558989857022208413302042, 19481494124653313226920867982906093382999179062874305939918363994940278910144), (12404354578383701398361954648874213767299422382992741959580848313894666991558, 3681055346442946456075864624209653665203621091677458235149138614991628837043), (1655021652721533542800704066631028267139302770104407750477065648065146099077, 6685607197327816041189402927534559856216550707795728417595093055800494498142), (13082471880318125482226932563646169048990687073942175168282434685677784697462, 11562552394551926598880117493235400572449849893652807717303177695558838051465), (16450834739176582245644488863351570642185901137457413591383759547753582375190, 12818968929671320520788095308166328838276364402014460847522111111426954374507)] }, VerifierKey { g: (14070702216460004021195164437060543783228245591252751935009966057749957940044, 14686864236139296636710799650405317270011623524278098068441628650870143322975), gamma_g: (9638528670876540098222030430471675784941164566359338419432461482892661577125, 6165173826056566184335676370582625365144066791726404319291757953178256305855), h: (QuadExtField(7652051068335088756094184969202952894494019427647785326875996910937289245397 + 10076424382974911714496977370184029532616209653961886567776591516207593498181 * u), QuadExtField(3714606160682233797226337832316505907527108301244302465581162226574169637802 + 13207686006062369882494049754066091628471895219946984036350222145945506049433 * u)), beta_h: (QuadExtField(10036106733671757863797545423549572972029754762564433636680434958208553410474 + 13306362571595287460309091940588410228450613330700473427264308382641864701874 * u), QuadExtField(9904648880586151946048698574868926269679252004219500242811450725767607594557 + 13238438518167288020649039193417135134450424316640040536451103589570324168841 * u)) })


nova.i: BigInt([4, 0, 0, 0])


nova.z_0: [BigInt([0, 0, 0, 0]), BigInt([0, 0, 0, 0]), BigInt([0, 0, 0, 0])]


nova.z_i: [BigInt([9062673722594577459, 18445398465162306915, 0, 0]), BigInt([9146102640559303075, 3173910318344653789, 0, 0]), BigInt([4, 0, 0, 0])]


nova.U_i: CommittedInstance { cmE: (3295263668490168173966190888076233665821257412420427225113172580894310694369, 4575852671076884753072216124958592074049440550573411495671454631059446768097, 20103899118435592978791236065054170003787459432580495321542905122190577527470), u: BigInt([5010289963963288587, 7987362129655015443, 1, 0]), cmW: (16056429024032733159416618916652546406824067281327488634666994655997097635936, 6997409494284840223061533716931465297190370177369273935326396273834937651859, 5488990840835235677863379048851496844088667023877751725106111735758794602124), x: [BigInt([6703255726420723452, 2490682473773449285, 2468464388119682901, 2679329521843094289]), BigInt([8356111546108801819, 11648993639235225032, 13054880386818083019, 2394056831937188656])] }


nova.u_i: CommittedInstance { cmE: infinity, u: BigInt([1, 0, 0, 0]), cmW: (17782093585727756134470676955155228088130559960732768283426171111445152410898, 13839514199555172739581684060390710081794296478918278402482349389324335514586, 9978990265233983460857697379056914442490160921460874608064519672604940432700), x: [BigInt([423847131482043185, 9602730134548410829, 8420089691919236873, 28776849376370256]), BigInt([4073478901109684675, 2245741539292417773, 13052396897176427962, 300442388882906966])] }


proof: Proof { snark_proof: Proof { a: (15381033345854613489399600669098745427851554080923167640491981827784084093372, 15117287647517499506875919628418750755128407729630515689109478053659157821640), b: (QuadExtField(20262048757177759190271223594079585984591629170663311538901462032516542550123 + 16601297537176243625789160906346623178878470759208751857136806916073435633247 * u), QuadExtField(3625807466256882087940171974952468348063777700385345769621690166757194764792 + 5946911947099219903215443621274706680188827833590723334395225969617152104967 * u)), c: (18471536826753749900590240753947575098396418364802489685460041422888914835022, 3642074043926853731094176531556807452920926250300713157992928908978475930088) }, kzg_proofs: [Proof { eval: BigInt([8477019102856918778, 17130530431251730030, 782589767023652393, 590672598344640591]), proof: (18113301924133515824135911393510325632651585386123661581401312425855895042457, 19127364550560792497997782686634510726141195093187148901548030551938552899980, 2348987045464711088117729026870689516439989811910507623025188280202974850113) }, Proof { eval: BigInt([3317050846821233235, 6037282869298812679, 14309235663316344741, 2950160709556411590]), proof: (18710207461666950459554523474408000798482599447407020182653974463169146800340, 17713853373402450486137149317289276437868211007661821562213585324374306248134, 10751070131509086037545982245595124705260377974432932742662072935223894548338) }], cmT: (8853255384280822480189083409819142354957494985698464964262335889672770986152, 11954048084094765046203646973818220845563514844187765547969037538436203396763, 10353701316287195485822779045129635526146487880832410920980303100912535546347), r: BigInt([6791425180772548407, 12427504757071408810, 0, 0]), kzg_challenges: [BigInt([6782803705623802834, 11883179970795636744, 7836819534539694132, 481330111514201781]), BigInt([13281171646814942268, 15203111537113162658, 2939821443032797047, 1147020151860255863])] }